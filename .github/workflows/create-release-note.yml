name: Create a release note

on: 
  pull_request:
    types: [closed]

jobs:
  create-release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master'
    steps:
      - uses: actions/checkout@v2
      - run: cp ./package.json ./package-lock.json .github/actions/build
      - uses: ./.github/actions/build

      - uses: actions/github-script@v3
        id: create_release
        env:
          PRODUCTION_BRANCH: master
          TZ: Asia/Tokyo
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs').promises;

            const pr = context.payload.pull_request
            if (!(pr.merged && pr.base.ref === process.env.PRODUCTION_BRANCH)) return;

            const merged_at = new Date(pr.merged_at);
            const tag_name = String(merged_at.getFullYear()).padStart(4, '0')
              + '-' + + String(merged_at.getMonth() + 1).padStart(2, '0')
              + '-' + String(merged_at.getDate()).padStart(2, '0')
              + ' ' + String(merged_at.getHours()).padStart(2, '0')
              + ':' + String(merged_at.getMinutes()).padStart(2, '0')
              + ':' + String(merged_at.getSeconds()).padStart(2, '0');

            const release = await github.repos.createRelease({
              ...context.repo,
              draft: false,
              tag_name: tag_name,
              name: tag_name,
              target_commitish: process.env.GITHUB_SHA,
              body: pr.body
            });

            for (let file of await fs.readdir('dist_electron')) {
              if(!file.endsWith('.exe') || !file.endsWith('.deb')) continue;

              console.log('uploading', file);
              await github.repos.uploadReleaseAsset({
                ...context.repo,
                release_id: release.data.id,
                name: file,
                data: await fs.readFile(`./${file}`)
              });            
            }